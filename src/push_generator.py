import json
import random
from datetime import datetime

class PushGenerator:
    def __init__(self, template_path):
        with open(template_path, 'r', encoding='utf-8') as f:
            self.templates = json.load(f)
        
        self.month_names = {
            1: "—è–Ω–≤–∞—Ä–µ", 2: "—Ñ–µ–≤—Ä–∞–ª–µ", 3: "–º–∞—Ä—Ç–µ", 4: "–∞–ø—Ä–µ–ª–µ",
            5: "–º–∞–µ", 6: "–∏—é–Ω–µ", 7: "–∏—é–ª–µ", 8: "–∞–≤–≥—É—Å—Ç–µ",
            9: "—Å–µ–Ω—Ç—è–±—Ä–µ", 10: "–æ–∫—Ç—è–±—Ä–µ", 11: "–Ω–æ—è–±—Ä–µ", 12: "–¥–µ–∫–∞–±—Ä–µ"
        }
    
    def generate_push(self, product_name, client_data, client_profile):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        template = self.templates.get(product_name, {}).get('template')
        
        if not template:
            return self._generate_fallback_push(product_name, client_profile['name'])
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        params = {
            'name': client_profile['name'],
            'month': self.month_names.get(datetime.now().month, '—ç—Ç–æ–º –º–µ—Å—è—Ü–µ')
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
        if product_name == "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞":
            top_categories = self._get_top_categories_russian(client_data)
            params.update({
                'cat1': top_categories[0] if len(top_categories) > 0 else "–ø–æ–∫—É–ø–∫–∏",
                'cat2': top_categories[1] if len(top_categories) > 1 else "—É—Å–ª—É–≥–∏",
                'cat3': top_categories[2] if len(top_categories) > 2 else "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
            })
        
        elif product_name == "–û–±–º–µ–Ω –≤–∞–ª—é—Ç":
            main_currency = self._get_main_currency(client_data)
            params['fx_curr'] = main_currency
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        push_text = template.format(**params)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ TOV –ø—Ä–∞–≤–∏–ª
        push_text = self._apply_tov_rules(push_text)
        
        return push_text
    
    def _get_top_categories_russian(self, client_data):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
        category_mapping_ru = {
            'fashion': "–æ–¥–µ–∂–¥–∞", 'groceries': "–ø—Ä–æ–¥—É–∫—Ç—ã", 'restaurants': "—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
            'healthcare': "–º–µ–¥–∏—Ü–∏–Ω–∞", 'auto': "–∞–≤—Ç–æ", 'sports': "—Å–ø–æ—Ä—Ç",
            'entertainment': "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", 'fuel': "–ê–ó–°", 'movies': "–∫–∏–Ω–æ",
            'pets': "–ø–∏—Ç–æ–º—Ü—ã", 'books': "–∫–Ω–∏–≥–∏", 'flowers': "—Ü–≤–µ—Ç—ã",
            'food_delivery': "–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã", 'streaming': "—Å—Ç—Ä–∏–º–∏–Ω–≥–∏",
            'gaming': "–∏–≥—Ä—ã", 'cosmetics': "–∫–æ—Å–º–µ—Ç–∏–∫–∞", 'gifts': "–ø–æ–¥–∞—Ä–∫–∏",
            'home_improvement': "—Ä–µ–º–æ–Ω—Ç", 'furniture': "–º–µ–±–µ–ª—å", 'spa': "—Å–ø–∞",
            'jewelry': "—É–∫—Ä–∞—à–µ–Ω–∏—è", 'taxi': "—Ç–∞–∫—Å–∏", 'hotels': "–æ—Ç–µ–ª–∏",
            'travel': "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
        }
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return ["—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–æ–Ω–ª–∞–π–Ω-–ø–æ–∫—É–ø–∫–∏"]
    
    def _get_main_currency(self, client_data):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç—ã –¥–ª—è FX"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç—ã
        return "–¥–æ–ª–ª–∞—Ä–∞—Ö"
    
    def _apply_tov_rules(self, text):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª Tone of Voice"""
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        text = text.replace('!!', '!').replace('??', '?')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(text) > 220:
            words = text.split()
            while len(' '.join(words)) > 220 and len(words) > 5:
                words = words[:-1]
            text = ' '.join(words) + '...'
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ (0-1 –ø–æ —Å–º—ã—Å–ª—É)
        emoji_map = {
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏': '‚úàÔ∏è',
            '–∫–∞—Ä—Ç': 'üí≥',
            '–∫–µ—à–±—ç–∫': 'üí∞',
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'üçΩÔ∏è',
            '–∏–Ω–≤–µ—Å—Ç': 'üìà',
            '–∫—Ä–µ–¥–∏—Ç': 'ü§ù'
        }
        
        for keyword, emoji in emoji_map.items():
            if keyword in text.lower() and random.random() < 0.3:
                text += f" {emoji}"
                break
        
        return text
    
    def _generate_fallback_push(self, product_name, client_name):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        templates = [
            f"{client_name}, —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ {product_name.lower()}. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏?",
            f"{client_name}, –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å –≤—ã–≥–æ–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî {product_name.lower()}. –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å?",
            f"{client_name}, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {product_name.lower()} —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –¥–ª—è –≤–∞—Å. –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?"
        ]
        
        return random.choice(templates)